definitions:
  APIErrorCode:
    enum:
    - 2100
    - 2101
    - 2102
    - 2103
    - 2104
    - 2105
    - 2106
    - 2107
    - 2108
    - 2109
    - 2110
    - 2111
    - 2112
    - 2113
    - 2114
    - 2115
    - 2116
    - 2117
    - 2118
    - 2119
    - 2120
    - 2121
    - 2122
    - 2123
    - 2124
    - 2125
    - 2126
    - 2127
    - 2128
    - 2129
    - 2130
    - 2131
    - 2132
    - 2133
    - 2134
    - 2135
    - 2136
    - 2137
    - 2138
    - 2139
    - 2140
    - 2141
    - 2142
    - 2143
    - 2144
    - 2145
    - 2146
    - 2147
    - 2148
    - 2149
    - 2150
    - 2151
    - 2152
    - 2153
    - 2154
    - 2155
    - 2156
    type: integer
    x-enum-varnames:
    - ErrCodeMalformedJWT
    - ErrCodeInvalidJWT
    - ErrCodeInvalidBodyData
    - ErrCodeInvalidUsernamePass
    - ErrCodeInvalidAuth
    - ErrCodePermissionDenied
    - ErrCodeInvalidInputPass
    - ErrCodeUsernameExists
    - ErrCodeInternalServerError
    - ErrCodeInvalidFileData
    - ErrCodeInvalidPhoneNumber
    - ErrCodePhoneNumberAlreadyImported
    - ErrCodeInvalidUserID
    - ErrCodeNoPhonesDonated
    - ErrCodeAgentNotConnected
    - ErrCodeInvalidPagination
    - ErrCodeMaxContactImportLimit
    - ErrCodePhoneNumberNotFound
    - ErrCodeParameterRequired
    - ErrCodeUserBanned
    - ErrCodeLabelInfoNotFound
    - ErrCodeLabelAlreadyApplied
    - ErrCodeLabelAlreadyExistsByName
    - ErrCodeTooManyChatLabelInfo
    - ErrCodeLabelNameTooLong
    - ErrCodeLabelDescriptionTooLong
    - ErrCodeInvalidColor
    - ErrCodeLabelNotApplied
    - ErrCodeCannotDeleteBuiltInLabel
    - ErrCodeDuplicatePhoneNumber
    - ErrCodePhoneNotWorking
    - ErrCodeInvalidPmsPass
    - ErrCodeInvalidAgentId
    - ErrCodeInvalidAppSettingName
    - ErrCodeAppSettingNotFound
    - ErrCodeTextEmpty
    - ErrCodeTextTooLong
    - ErrCodeInvalidClientRId
    - ErrCodeInvalidCaptcha
    - ErrCodeQueryParameterNotProvided
    - ErrCodeTooManyPasswordChangeAttempts
    - ErrCodeRequestExpired
    - ErrCodeInvalidEmail
    - ErrCodeCourseAlreadyExists
    - ErrCodeCourseNotFound
    - ErrCodeExamNotFound
    - ErrCodeNotParticipatedInExam
    - ErrCodeExamNotStarted
    - ErrCodeExamFinished
    - ErrCodeExamQuestionNotFound
    - ErrCodeInvalidAnswerOption
    - ErrCodeGivenExamNotFound
    - ErrCodeAccountAlreadyConfirmed
    - ErrCodeEmailAlreadyExists
    - ErrCodeTopicNameExists
    - ErrCodeTopicNotFound
    - ErrCodeBodyTooLong
  AnswerQuestionData:
    properties:
      answer_text:
        type: string
      chosen_option:
        type: string
      exam_id:
        type: integer
      question_id:
        type: integer
      seconds_taken:
        type: integer
    type: object
  AnswerQuestionResult:
    properties:
      answered_at:
        type: string
      answered_by:
        type: string
      exam_id:
        type: integer
      question_id:
        type: integer
    type: object
  AnsweredQuestionInfo:
    properties:
      answer:
        type: string
      chosen_option:
        type: string
      question_id:
        type: integer
      seconds_taken:
        type: integer
    type: object
  AuthResult:
    properties:
      access_token:
        type: string
      expiration:
        type: integer
      full_name:
        type: string
      refresh_token:
        type: string
      role:
        type: string
      user_id:
        type: string
    type: object
  BanUserData:
    properties:
      ban_reason:
        type: string
      is_banned:
        type: boolean
      user_id:
        type: string
    type: object
  BanUserResult:
    properties:
      ban_reason:
        type: string
      is_banned:
        type: boolean
      user_id:
        type: string
    type: object
  ChangePasswordData:
    properties:
      lang:
        default: en
        type: string
      new_password:
        type: string
      user_id:
        type: string
    type: object
  ChangePasswordResult:
    properties:
      email_sent:
        type: boolean
      lang:
        default: en
        type: string
      password_changed:
        type: boolean
    type: object
  ConfirmAccountData:
    properties:
      confirm_token:
        type: string
      lt_token:
        type: string
      raw_password:
        type: string
      rl_token:
        type: string
      user_id:
        type: string
    type: object
  ConfirmChangePasswordData:
    properties:
      new_password:
        type: string
      rq_id:
        type: string
      rt_hash:
        type: string
      rt_param:
        type: string
      rt_verifier:
        type: string
    type: object
  CourseParticipantInfo:
    properties:
      full_name:
        type: string
      user_id:
        type: string
    type: object
  CreateCourseData:
    properties:
      course_description:
        type: string
      course_name:
        type: string
      topic_id:
        type: integer
    type: object
  CreateCourseResult:
    properties:
      added_by:
        type: string
      course_description:
        type: string
      course_id:
        type: integer
      course_name:
        type: string
      created_at:
        type: string
      topic_id:
        type: integer
    type: object
  CreateExamData:
    properties:
      course_id:
        type: integer
      duration:
        default: 60
        type: integer
      exam_date:
        type: integer
      exam_description:
        type: string
      exam_title:
        type: string
      is_public:
        default: false
        type: boolean
      price:
        default: 0T
        type: string
    type: object
  CreateExamResult:
    properties:
      course_id:
        type: integer
      created_at:
        type: string
      created_by:
        type: string
      duration:
        type: integer
      exam_date:
        type: string
      exam_id:
        type: integer
      is_public:
        type: boolean
      price:
        type: string
    type: object
  CreateNewTopicData:
    properties:
      topic_name:
        type: string
    type: object
  CreateNewTopicResult:
    properties:
      topic_id:
        type: integer
      topic_name:
        type: string
    type: object
  CreateUserData:
    properties:
      email:
        type: string
      full_name:
        type: string
      password:
        type: string
      phone_number:
        type: string
      primary_language:
        type: string
      role:
        $ref: '#/definitions/UserRole'
      setup_completed:
        type: boolean
      user_address:
        type: string
      user_id:
        type: string
    type: object
  CreateUserResult:
    properties:
      email:
        type: string
      full_name:
        type: string
      role:
        type: string
      user_id:
        type: string
    type: object
  EditCourseData:
    properties:
      course_description:
        type: string
      course_id:
        type: integer
      course_name:
        type: string
      topic_id:
        type: integer
    type: object
  EditCourseResult:
    properties:
      added_by:
        type: string
      course_description:
        type: string
      course_id:
        type: integer
      course_name:
        type: string
      created_at:
        type: string
    type: object
  EditExamData:
    properties:
      course_id:
        type: integer
      duration:
        default: 60
        type: integer
      exam_date:
        type: integer
      exam_description:
        type: string
      exam_id:
        type: integer
      exam_title:
        type: string
      is_public:
        default: false
        type: boolean
      price:
        default: 0T
        type: string
    type: object
  EditExamResult:
    properties:
      course_id:
        type: integer
      created_at:
        type: string
      created_by:
        type: string
      duration:
        type: integer
      exam_date:
        type: string
      exam_description:
        type: string
      exam_id:
        type: integer
      exam_title:
        type: string
      is_public:
        type: boolean
      price:
        type: string
    type: object
  EditUserData:
    properties:
      email:
        type: string
      full_name:
        type: string
      phone_number:
        type: string
      user_address:
        type: string
      user_id:
        type: string
    type: object
  EditUserResult:
    properties:
      email:
        type: string
      full_name:
        type: string
      role:
        $ref: '#/definitions/UserRole'
      user_id:
        type: string
    type: object
  EndpointError:
    properties:
      code:
        $ref: '#/definitions/APIErrorCode'
      date:
        type: string
      message:
        type: string
      origin:
        type: string
    type: object
  EndpointResponse:
    properties:
      error:
        $ref: '#/definitions/EndpointError'
      result: {}
      success:
        type: boolean
    type: object
  ExamQuestionInfo:
    properties:
      created_at:
        type: string
      description:
        type: string
      option1:
        type: string
      option2:
        type: string
      option3:
        type: string
      option4:
        type: string
      question_id:
        type: integer
      question_title:
        type: string
      user_answer:
        $ref: '#/definitions/AnsweredQuestionInfo'
    type: object
  GetAllUserTopicStatsResult:
    properties:
      stats:
        items:
          $ref: '#/definitions/UserTopicStatInfo'
        type: array
      user_id:
        type: string
    type: object
  GetCourseInfoResult:
    properties:
      added_by:
        type: string
      course_description:
        type: string
      course_id:
        type: integer
      course_name:
        type: string
      created_at:
        type: string
      topic_id:
        type: integer
    type: object
  GetCourseParticipantsData:
    properties:
      course_id:
        type: integer
    type: object
  GetCourseParticipantsResult:
    properties:
      participants:
        items:
          $ref: '#/definitions/CourseParticipantInfo'
        type: array
    type: object
  GetCreatedCoursesData:
    properties:
      user_id:
        type: string
    type: object
  GetCreatedCoursesResult:
    properties:
      courses:
        items:
          $ref: '#/definitions/SearchedCourseInfo'
        type: array
    type: object
  GetExamInfoResult:
    properties:
      course_id:
        type: integer
      created_at:
        type: string
      created_by:
        type: string
      duration:
        type: integer
      exam_date:
        type: string
      exam_description:
        type: string
      exam_id:
        type: integer
      exam_title:
        type: string
      finishes_in:
        type: integer
      has_finished:
        type: boolean
      has_started:
        type: boolean
      is_public:
        type: boolean
      price:
        type: string
      question_count:
        type: integer
      starts_in:
        type: integer
    type: object
  GetExamQuestionsData:
    properties:
      exam_id:
        type: integer
    type: object
  GetExamQuestionsResult:
    properties:
      exam_id:
        type: integer
      questions:
        items:
          $ref: '#/definitions/ExamQuestionInfo'
        type: array
    type: object
  GetGivenExamData:
    properties:
      added_by:
        type: string
      created_at:
        type: string
      exam_id:
        type: integer
      final_score:
        type: string
      price:
        type: string
      scored_by:
        type: string
      user_id:
        type: string
    type: object
  GetMeResult:
    properties:
      full_name:
        type: string
      role:
        $ref: '#/definitions/UserRole'
      user_id:
        type: string
    type: object
  GetTopicInfoResult:
    properties:
      topic_id:
        type: integer
      topic_name:
        type: string
    type: object
  GetUserCoursesData:
    properties:
      user_id:
        type: string
    type: object
  GetUserCoursesResult:
    properties:
      courses:
        items:
          $ref: '#/definitions/UserParticipatedCourse'
        type: array
    type: object
  GetUserInfoResult:
    properties:
      ban_reason:
        type: string
      created_at:
        type: string
      email:
        type: string
      full_name:
        type: string
      is_banned:
        type: boolean
      role:
        $ref: '#/definitions/UserRole'
      user_id:
        type: string
    type: object
  GetUserOngoingExamsResult:
    properties:
      exams:
        items:
          $ref: '#/definitions/UserOngoingExamInfo'
        type: array
    type: object
  GetUserTopicStatData:
    properties:
      topic_id:
        type: integer
      user_id:
        type: string
    type: object
  GetUserTopicStatResult:
    properties:
      stat:
        $ref: '#/definitions/UserTopicStatInfo'
    type: object
  GetUsersExamHistoryData:
    properties:
      limit:
        type: integer
      offset:
        type: integer
      user_id:
        type: string
    type: object
  GetUsersExamHistoryResult:
    properties:
      exams:
        items:
          $ref: '#/definitions/UserExamHistoryInfo'
        type: array
    type: object
  LoginData:
    properties:
      captcha_answer:
        type: string
      captcha_id:
        type: string
      client_rid:
        type: string
      password:
        type: string
      user_id:
        type: string
    type: object
  LoginResult:
    properties:
      access_token:
        type: string
      expiration:
        type: integer
      full_name:
        type: string
      refresh_token:
        type: string
      role:
        $ref: '#/definitions/UserRole'
      user_id:
        type: string
    type: object
  SearchCourseData:
    properties:
      course_name:
        type: string
      limit:
        type: integer
      offset:
        type: integer
    type: object
  SearchCourseResult:
    properties:
      courses:
        items:
          $ref: '#/definitions/SearchedCourseInfo'
        type: array
    type: object
  SearchExamData:
    properties:
      limit:
        type: integer
      offset:
        type: integer
      search_query:
        type: string
    type: object
  SearchExamResult:
    properties:
      exams:
        items:
          $ref: '#/definitions/SearchedExamInfo'
        type: array
    type: object
  SearchTopicData:
    properties:
      topic_name:
        type: string
    type: object
  SearchTopicResult:
    properties:
      topics:
        items:
          $ref: '#/definitions/SearchedTopicInfo'
        type: array
    type: object
  SearchUserData:
    properties:
      limit:
        minimum: 1
        type: integer
      offset:
        type: integer
      query:
        type: string
    type: object
  SearchUserResult:
    properties:
      users:
        items:
          $ref: '#/definitions/SearchedUserInfo'
        type: array
    type: object
  SearchedCourseInfo:
    properties:
      added_by:
        type: string
      course_description:
        type: string
      course_id:
        type: integer
      course_name:
        type: string
      created_at:
        type: string
      topic_id:
        type: integer
    type: object
  SearchedExamInfo:
    properties:
      course_id:
        type: integer
      created_at:
        type: string
      created_by:
        type: string
      duration:
        type: integer
      exam_date:
        type: string
      exam_description:
        type: string
      exam_id:
        type: integer
      exam_title:
        type: string
      is_public:
        type: boolean
      price:
        type: string
    type: object
  SearchedTopicInfo:
    properties:
      topic_id:
        type: integer
      topic_name:
        type: string
    type: object
  SearchedUserInfo:
    properties:
      ban_reason:
        type: string
      created_at:
        type: string
      email:
        type: string
      full_name:
        type: string
      is_banned:
        type: boolean
      role:
        $ref: '#/definitions/UserRole'
      user_id:
        type: string
    type: object
  SetScoreData:
    properties:
      exam_id:
        description: ExamId is the exam we are trying to give this score to.
        type: integer
      score:
        description: Score is the score we are trying to give to the user.
        type: string
      user_id:
        description: UserId is the person we are trying to give this score to.
        type: string
    type: object
  SetScoreResult:
    properties:
      exam_id:
        type: integer
      score:
        type: string
      scored_by:
        type: string
      user_id:
        type: string
    type: object
  UserExamHistoryInfo:
    properties:
      exam_id:
        type: integer
      exam_title:
        type: string
      started_at:
        type: string
    type: object
  UserOngoingExamInfo:
    properties:
      course_id:
        type: integer
      exam_id:
        type: integer
      start_time:
        type: string
    type: object
  UserParticipatedCourse:
    properties:
      course_id:
        type: integer
      course_name:
        type: string
    type: object
  UserRole:
    description: UserRole is the role of the user.
    enum:
    - owner
    - admin
    - student
    - teacher
    - ""
    type: string
    x-enum-varnames:
    - UserRoleOwner
    - UserRoleAdmin
    - UserRoleStudent
    - UserRoleTeacher
    - UserRoleUnknown
  UserTopicStatInfo:
    properties:
      current_exp:
        type: integer
      current_level:
        type: integer
      last_visited:
        type: string
      topic_id:
        type: integer
      total_exp:
        type: integer
      user_id:
        type: string
    type: object
  captchaHandlers.GetCaptchaResult:
    properties:
      captcha:
        type: string
      captcha_id:
        type: string
      client_r_id:
        type: string
    type: object
info:
  contact: {}
  description: This is the API for the ExamSphere system
  title: ExamSphere API
  version: "1.0"
paths:
  /api/v1/captcha/generate:
    get:
      description: Allows a client (with Client-R-ID) to generate a captcha
      operationId: GenerateCaptchaV1
      parameters:
      - description: Client-R-ID
        in: header
        name: Client-R-ID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/EndpointResponse'
            - properties:
                result:
                  $ref: '#/definitions/captchaHandlers.GetCaptchaResult'
              type: object
      summary: Get a captcha
      tags:
      - User
  /api/v1/course/courseParticipants:
    post:
      consumes:
      - application/json
      description: Allows a user to get all participants of a course.
      operationId: getCourseParticipantsV1
      parameters:
      - description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Data needed to get course participants
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/GetCourseParticipantsData'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/EndpointResponse'
            - properties:
                result:
                  $ref: '#/definitions/GetCourseParticipantsResult'
              type: object
      summary: Get course participants
      tags:
      - Course
  /api/v1/course/create:
    post:
      consumes:
      - application/json
      description: Allows a user to create a new course.
      operationId: createCourseV1
      parameters:
      - description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Data needed to create a new course
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/CreateCourseData'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/EndpointResponse'
            - properties:
                result:
                  $ref: '#/definitions/CreateCourseResult'
              type: object
      summary: Create a new course
      tags:
      - Course
  /api/v1/course/createdCourses:
    post:
      consumes:
      - application/json
      description: Allows a user to get all courses created by a user.
      operationId: getCreatedCoursesV1
      parameters:
      - description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Data needed to get created courses
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/GetCreatedCoursesData'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/EndpointResponse'
            - properties:
                result:
                  $ref: '#/definitions/GetCreatedCoursesResult'
              type: object
      summary: Get created courses
      tags:
      - Course
  /api/v1/course/edit:
    post:
      consumes:
      - application/json
      description: Allows a user to edit a course.
      operationId: editCourseV1
      parameters:
      - description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Data needed to edit a course
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/EditCourseData'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/EndpointResponse'
            - properties:
                result:
                  $ref: '#/definitions/EditCourseResult'
              type: object
      summary: Edit a course
      tags:
      - Course
  /api/v1/course/info:
    get:
      consumes:
      - application/json
      description: Allows a user to get information about a course by its id.
      operationId: getCourseInfoV1
      parameters:
      - description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Course ID
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/EndpointResponse'
            - properties:
                result:
                  $ref: '#/definitions/GetCourseInfoResult'
              type: object
      summary: Get course information
      tags:
      - Course
  /api/v1/course/search:
    post:
      consumes:
      - application/json
      description: Allows a user to search for courses by their name. Pass empty string
        to get all courses.
      operationId: searchCourseV1
      parameters:
      - description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Data needed to search for courses
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/SearchCourseData'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/EndpointResponse'
            - properties:
                result:
                  $ref: '#/definitions/SearchCourseResult'
              type: object
      summary: Search for courses
      tags:
      - Course
  /api/v1/course/userCourses:
    post:
      consumes:
      - application/json
      description: Allows a user to get all courses participated by a user.
      operationId: getUserCoursesV1
      parameters:
      - description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Data needed to get user courses
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/GetUserCoursesData'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/EndpointResponse'
            - properties:
                result:
                  $ref: '#/definitions/GetUserCoursesResult'
              type: object
      summary: Get user courses
      tags:
      - Course
  /api/v1/exam/answer:
    post:
      consumes:
      - application/json
      description: Allows the user to answer a question of an exam.
      operationId: answerExamQuestionV1
      parameters:
      - description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Data needed to answer a question of an exam
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/AnswerQuestionData'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/EndpointResponse'
            - properties:
                result:
                  $ref: '#/definitions/AnswerQuestionResult'
              type: object
      summary: Answer a question of an exam
      tags:
      - Exam
  /api/v1/exam/create:
    post:
      consumes:
      - application/json
      description: Allows the user to create a new exam.
      operationId: createExamV1
      parameters:
      - description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Data needed to create a new exam
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/CreateExamData'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/EndpointResponse'
            - properties:
                result:
                  $ref: '#/definitions/CreateExamResult'
              type: object
      summary: Create a new exam
      tags:
      - Exam
  /api/v1/exam/edit:
    post:
      consumes:
      - application/json
      description: Allows the user to edit an exam.
      operationId: editExamV1
      parameters:
      - description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Data needed to edit an exam
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/EditExamData'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/EndpointResponse'
            - properties:
                result:
                  $ref: '#/definitions/EditExamResult'
              type: object
      summary: Edit an exam
      tags:
      - Exam
  /api/v1/exam/givenExam:
    post:
      consumes:
      - application/json
      description: Allows the user to get information about an exam that a user has
        participated in.
      operationId: getGivenExamV1
      parameters:
      - description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Data needed to get information about an exam that a user has
          participated in
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/GetGivenExamData'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/EndpointResponse'
            - properties:
                result:
                  $ref: '#/definitions/GetGivenExamData'
              type: object
      summary: Get information about an exam that a user has participated in
      tags:
      - Exam
  /api/v1/exam/info:
    get:
      consumes:
      - application/json
      description: Allows the user to get information about an exam.
      operationId: getExamInfoV1
      parameters:
      - description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Exam ID
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/EndpointResponse'
            - properties:
                result:
                  $ref: '#/definitions/GetExamInfoResult'
              type: object
      summary: Get information about an exam
      tags:
      - Exam
  /api/v1/exam/questions:
    post:
      consumes:
      - application/json
      description: Allows the user to get questions of an exam.
      operationId: getExamQuestionsV1
      parameters:
      - description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Data needed to get questions of an exam
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/GetExamQuestionsData'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/EndpointResponse'
            - properties:
                result:
                  $ref: '#/definitions/GetExamQuestionsResult'
              type: object
      summary: Get questions of an exam
      tags:
      - Exam
  /api/v1/exam/search:
    post:
      consumes:
      - application/json
      description: Allows the user to search exams.
      operationId: searchExamV1
      parameters:
      - description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Data needed to search exams
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/SearchExamData'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/EndpointResponse'
            - properties:
                result:
                  $ref: '#/definitions/SearchExamResult'
              type: object
      summary: Search exams
      tags:
      - Exam
  /api/v1/exam/setScore:
    post:
      consumes:
      - application/json
      description: Allows the user to set score for a user in an exam.
      operationId: setScoreV1
      parameters:
      - description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Data needed to set score for a user in an exam
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/SetScoreData'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/EndpointResponse'
            - properties:
                result:
                  $ref: '#/definitions/SetScoreResult'
              type: object
      summary: Set score for a user in an exam
      tags:
      - Exam
  /api/v1/exam/userExamsHistory:
    post:
      consumes:
      - application/json
      description: Allows the user to get history of exams of a user.
      operationId: getUserExamsHistoryV1
      parameters:
      - description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Data needed to get history of exams of a user
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/GetUsersExamHistoryData'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/EndpointResponse'
            - properties:
                result:
                  $ref: '#/definitions/GetUsersExamHistoryResult'
              type: object
      summary: Get history of exams of a user
      tags:
      - Exam
  /api/v1/exam/userOngoingExams:
    get:
      consumes:
      - application/json
      description: Allows the user to get ongoing exams of a user.
      operationId: getUserOngoingExamsV1
      parameters:
      - description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Target user id
        in: query
        name: targetId
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/EndpointResponse'
            - properties:
                result:
                  $ref: '#/definitions/GetUserOngoingExamsResult'
              type: object
      summary: Get ongoing exams of a user
      tags:
      - Exam
  /api/v1/topic/allUserTopicStats:
    get:
      consumes:
      - application/json
      description: Get all user topic stats
      operationId: getAllUserTopicStatsV1
      parameters:
      - description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/EndpointResponse'
            - properties:
                result:
                  $ref: '#/definitions/GetAllUserTopicStatsResult'
              type: object
      summary: Get all user topic stats
      tags:
      - Topic
  /api/v1/topic/create:
    post:
      consumes:
      - application/json
      description: Create a new topic
      operationId: createTopicV1
      parameters:
      - description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Data needed to create a new topic
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/CreateNewTopicData'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/EndpointResponse'
            - properties:
                result:
                  $ref: '#/definitions/CreateNewTopicResult'
              type: object
      summary: Create a new topic
      tags:
      - Topic
  /api/v1/topic/delete:
    delete:
      consumes:
      - application/json
      description: Allows moderators to delete a topic. All courses and exams related
        to the topic will be deleted as well.
      operationId: deleteTopicV1
      parameters:
      - description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Topic ID
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/EndpointResponse'
            - properties:
                result:
                  type: boolean
              type: object
      summary: Delete a topic
      tags:
      - Topic
  /api/v1/topic/info:
    get:
      consumes:
      - application/json
      description: Get topic info
      operationId: getTopicInfoV1
      parameters:
      - description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Topic ID
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/EndpointResponse'
            - properties:
                result:
                  $ref: '#/definitions/GetTopicInfoResult'
              type: object
      summary: Get topic info
      tags:
      - Topic
  /api/v1/topic/search:
    post:
      consumes:
      - application/json
      description: Search for topics
      operationId: searchTopicV1
      parameters:
      - description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Data needed to search for topics
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/SearchTopicData'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/EndpointResponse'
            - properties:
                result:
                  $ref: '#/definitions/SearchTopicResult'
              type: object
      summary: Search for topics
      tags:
      - Topic
  /api/v1/topic/userTopicStat:
    post:
      consumes:
      - application/json
      description: Get user topic stat
      operationId: getUserTopicStatV1
      parameters:
      - description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Data needed to get user topic stat
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/GetUserTopicStatData'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/EndpointResponse'
            - properties:
                result:
                  $ref: '#/definitions/GetUserTopicStatResult'
              type: object
      summary: Get user topic stat
      tags:
      - Topic
  /api/v1/user/ban:
    post:
      consumes:
      - application/json
      description: Allows a user to ban another user
      operationId: banUserV1
      parameters:
      - description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Ban user data
        in: body
        name: banUserData
        required: true
        schema:
          $ref: '#/definitions/BanUserData'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/EndpointResponse'
            - properties:
                result:
                  $ref: '#/definitions/BanUserResult'
              type: object
      summary: Ban a user
      tags:
      - User
  /api/v1/user/changePassword:
    post:
      consumes:
      - application/json
      description: Allows a user to change a user's password.
      operationId: changePasswordV1
      parameters:
      - description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Change password data
        in: body
        name: changePasswordData
        required: true
        schema:
          $ref: '#/definitions/ChangePasswordData'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/EndpointResponse'
            - properties:
                result:
                  $ref: '#/definitions/ChangePasswordResult'
              type: object
      summary: Change a user's password
      tags:
      - User
  /api/v1/user/confirmAccount:
    post:
      consumes:
      - application/json
      description: Allows a user to confirm their account
      operationId: confirmAccountV1
      parameters:
      - description: Confirm account data
        in: body
        name: confirmAccountData
        required: true
        schema:
          $ref: '#/definitions/ConfirmAccountData'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/EndpointResponse'
            - properties:
                result:
                  type: boolean
              type: object
      summary: Confirm account
      tags:
      - User
  /api/v1/user/confirmChangePassword:
    post:
      consumes:
      - application/json
      description: Allows a user to confirm changing their own's password (from redirected
        page)
      operationId: confirmChangePasswordV1
      parameters:
      - description: Confirm change password data
        in: body
        name: confirmChangePasswordData
        required: true
        schema:
          $ref: '#/definitions/ConfirmChangePasswordData'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/EndpointResponse'
            - properties:
                result:
                  type: boolean
              type: object
      summary: Confirm changing your own's password
      tags:
      - User
  /api/v1/user/create:
    post:
      consumes:
      - application/json
      description: Allows a user to create a new user
      operationId: createUserV1
      parameters:
      - description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Create user data
        in: body
        name: createUserData
        required: true
        schema:
          $ref: '#/definitions/CreateUserData'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/EndpointResponse'
            - properties:
                result:
                  $ref: '#/definitions/CreateUserResult'
              type: object
      summary: Create a new user
      tags:
      - User
  /api/v1/user/edit:
    post:
      consumes:
      - application/json
      description: Allows a user to edit another user. Users are not allowed to edit
        their own information.
      operationId: editUserV1
      parameters:
      - description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Edit user data
        in: body
        name: editUserData
        required: true
        schema:
          $ref: '#/definitions/EditUserData'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/EndpointResponse'
            - properties:
                result:
                  $ref: '#/definitions/EditUserResult'
              type: object
      summary: Edit a user's basic information
      tags:
      - User
  /api/v1/user/info:
    get:
      description: Allows a user to get another user's information by their user ID
      operationId: getUserInfoV1
      parameters:
      - description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/EndpointResponse'
            - properties:
                result:
                  $ref: '#/definitions/GetUserInfoResult'
              type: object
      summary: Get a user's information
      tags:
      - User
  /api/v1/user/login:
    post:
      consumes:
      - application/json
      description: Allows a user to login to the system and obtain access/refresh
        tokens
      operationId: loginV1
      parameters:
      - description: Login data
        in: body
        name: loginData
        required: true
        schema:
          $ref: '#/definitions/LoginData'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/EndpointResponse'
            - properties:
                result:
                  $ref: '#/definitions/LoginResult'
              type: object
      summary: Login to the system
      tags:
      - User
  /api/v1/user/me:
    get:
      description: Allows a user to get their own information
      operationId: getMeV1
      parameters:
      - description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/EndpointResponse'
            - properties:
                result:
                  $ref: '#/definitions/GetMeResult'
              type: object
      summary: Get the user's information
      tags:
      - User
  /api/v1/user/reAuth:
    post:
      description: Allows a user to refresh their access token
      operationId: reAuthV1
      parameters:
      - description: Refresh token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/EndpointResponse'
            - properties:
                result:
                  $ref: '#/definitions/AuthResult'
              type: object
      summary: Refresh the access token
      tags:
      - User
  /api/v1/user/search:
    post:
      consumes:
      - application/json
      description: Allows a user to search for users
      operationId: searchUserV1
      parameters:
      - description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Search user data
        in: body
        name: searchUserData
        required: true
        schema:
          $ref: '#/definitions/SearchUserData'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/EndpointResponse'
            - properties:
                result:
                  $ref: '#/definitions/SearchUserResult'
              type: object
      summary: Search users
      tags:
      - User
swagger: "2.0"
